# Bare-metal configuration


When deploying Red Hat OpenShift Container Platform on bare-metal hosts, there are times when you need to make changes to the host either before or after provisioning. This can include inspecting the host's hardware, firmware, and firmware details. It can also include formatting disks or changing modifiable firmware settings.

# About the Bare Metal Operator

Use the Bare Metal Operator (BMO) to provision, manage, and inspect bare-metal hosts in your cluster.

The BMO uses the following resources to complete these tasks:

* BareMetalHost
* HostFirmwareSettings
* FirmwareSchema
* HostFirmwareComponents

The BMO maintains an inventory of the physical hosts in the cluster by mapping each bare-metal host to an instance of the BareMetalHost custom resource definition. Each BareMetalHost resource features hardware, software, and firmware details. The BMO continually inspects the bare-metal hosts in the cluster to ensure each BareMetalHost resource accurately details the components of the corresponding host.

The BMO also uses the HostFirmwareSettings resource, the FirmwareSchema resource, and the HostFirmwareComponents resource to detail firmware specifications and upgrade or downgrade firmware for the bare-metal host.

The BMO interfaces with bare-metal hosts in the cluster by using the Ironic API service. The Ironic service uses the Baseboard Management Controller (BMC) on the host to interface with the machine.

Some common tasks you can complete by using the BMO include the following:

* Provision bare-metal hosts to the cluster with a specific image
* Format a host's disk contents before provisioning or after deprovisioning
* Turn on or off a host
* Change firmware settings
* View the host's hardware details
* Upgrade or downgrade a host's firmware to a specific version

## Bare Metal Operator architecture

The Bare Metal Operator (BMO) uses the following resources to provision, manage, and inspect bare-metal hosts in your cluster. The following diagram illustrates the architecture of these resources:

![BMO architecture overview]

The BareMetalHost resource defines a physical host and its properties. When you provision a bare-metal host to the cluster, you must define a BareMetalHost resource for that host. For ongoing management of the host, you can inspect the information in the BareMetalHost or update this information.

The BareMetalHost resource features provisioning information such as the following:

* Deployment specifications such as the operating system boot image or the custom RAM disk
* Provisioning state
* Baseboard Management Controller (BMC) address
* Desired power state

The BareMetalHost resource features hardware information such as the following:

* Number of CPUs
* MAC address of a NIC
* Size of the host's storage device
* Current power state

You can use the HostFirmwareSettings resource to retrieve and manage the firmware settings for a host. When a host moves to the Available state, the Ironic service reads the host&#8217;s firmware settings and creates the HostFirmwareSettings resource. There is a one-to-one mapping between the BareMetalHost resource and the HostFirmwareSettings resource.

You can use the HostFirmwareSettings resource to inspect the firmware specifications for a host or to update a host&#8217;s firmware specifications.


[NOTE]
----
You must adhere to the schema specific to the vendor firmware when you edit the spec field of the HostFirmwareSettings resource. This schema is defined in the read-only FirmwareSchema resource.
----

Firmware settings vary among hardware vendors and host models. A FirmwareSchema resource is a read-only resource that contains the types and limits for each firmware setting on each host model. The data comes directly from the BMC by using the Ironic service. The FirmwareSchema resource enables you to identify valid values you can specify in the spec field of the HostFirmwareSettings resource.

A FirmwareSchema resource can apply to many BareMetalHost resources if the schema is the same.

Metal3 provides the HostFirmwareComponents resource, which describes BIOS and baseboard management controller (BMC) firmware versions. You can upgrade or downgrade the host&#8217;s firmware to a specific version by editing the spec field of the HostFirmwareComponents resource. This is useful when deploying with validated patterns that have been tested against specific firmware versions.

* Metal3 API service for provisioning bare-metal hosts
* Ironic API service for managing bare-metal infrastructure

## Optional: Creating a manifest object that includes a customized br-ex bridge

As an alternative to using the configure-ovs.sh shell script to set a customized br-ex bridge on a bare-metal platform, you can create a NodeNetworkConfigurationPolicy custom resource (CR) that includes a customized br-ex bridge network configuration.


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

This feature supports the following tasks:

* Modifying the maximum transmission unit (MTU) for your cluster.
* Modifying attributes of a different bond interface, such as MIImon (Media Independent Interface Monitor), bonding mode, or Quality of Service (QoS).
* Updating DNS values.

Consider the following use cases for creating a manifest object that includes a customized br-ex bridge:

* You want to make postinstallation changes to the bridge, such as changing the Open vSwitch (OVS) or OVN-Kubernetes br-ex bridge network. The configure-ovs.sh shell script does not support making postinstallation changes to the bridge.
* You want to deploy the bridge on a different interface than the interface available on a host or server IP address.
* You want to make advanced configurations to the bridge that are not possible with the configure-ovs.sh shell script. Using the script for these configurations might result in the bridge failing to connect multiple network interfaces and facilitating data forwarding between the interfaces.

* You set a customized br-ex by using the alternative method to configure-ovs.
* You installed the Kubernetes NMState Operator.

1. Create a NodeNetworkConfigurationPolicy (NNCP) CR and define a customized br-ex bridge network configuration. Depending on your needs, ensure that you set a masquerade IP for either the ipv4.address.ip, ipv6.address.ip, or both parameters. A masquerade IP address must match an in-use IP address block.
Example of an NNCP CR that sets IPv6 and IPv4 masquerade IP addresses

```yaml
apiVersion: nmstate.io/v1
kind: NodeNetworkConfigurationPolicy
metadata:
  name: worker-0-br-ex 1
spec:
  nodeSelector:
    kubernetes.io/hostname: worker-0
    desiredState:
    interfaces:
    - name: enp2s0 2
      type: ethernet 3
      state: up 4
      ipv4:
        enabled: false 5
      ipv6:
        enabled: false
    - name: br-ex
      type: ovs-bridge
      state: up
      ipv4:
        enabled: false
        dhcp: false
      ipv6:
        enabled: false
        dhcp: false
      bridge:
        port:
        - name: enp2s0 6
        - name: br-ex
    - name: br-ex
      type: ovs-interface
      state: up
      copy-mac-from: enp2s0
      ipv4:
        enabled: true
        dhcp: true
        address:
        - ip: "169.254.169.2"
          prefix-length: 29
      ipv6:
        enabled: false
        dhcp: false
        address:
        - ip: "fd69::2"
        prefix-length: 125
```

Name of the policy.
Name of the interface.
The type of ethernet.
The requested state for the interface after creation.
Disables IPv4 and IPv6 in this example.
The node NIC to which the bridge is attached.

# About the BareMetalHost resource

Metal3 introduces the concept of the BareMetalHost resource, which defines a physical host and its properties. The BareMetalHost resource contains two sections:

1. The BareMetalHost spec
2. The BareMetalHost status

## The BareMetalHost spec

The spec section of the BareMetalHost resource defines the desired state of the host.



## The BareMetalHost status

The BareMetalHost status represents the host&#8217;s current state, and includes tested credentials, current hardware details, and other information.



# Getting the BareMetalHost resource

The BareMetalHost resource contains the properties of a physical host. You must get the BareMetalHost resource for a physical host to review its properties.

1. Get the list of BareMetalHost resources:

```terminal
$ oc get bmh -n openshift-machine-api -o yaml
```


[NOTE]
----
You can use baremetalhost as the long form of bmh with oc get command.
----
2. Get the list of hosts:

```terminal
$ oc get bmh -n openshift-machine-api
```

3. Get the BareMetalHost resource for a specific host:

```terminal
$ oc get bmh <host_name> -n openshift-machine-api -o yaml
```


Where <host_name> is the name of the host.
Example output

```yaml
apiVersion: metal3.io/v1alpha1
kind: BareMetalHost
metadata:
  creationTimestamp: "2022-06-16T10:48:33Z"
  finalizers:
  - baremetalhost.metal3.io
  generation: 2
  name: openshift-worker-0
  namespace: openshift-machine-api
  resourceVersion: "30099"
  uid: 1513ae9b-e092-409d-be1b-ad08edeb1271
spec:
  automatedCleaningMode: metadata
  bmc:
    address: redfish://10.46.61.19:443/redfish/v1/Systems/1
    credentialsName: openshift-worker-0-bmc-secret
    disableCertificateVerification: true
  bootMACAddress: 48:df:37:c7:f7:b0
  bootMode: UEFI
  consumerRef:
    apiVersion: machine.openshift.io/v1beta1
    kind: Machine
    name: ocp-edge-958fk-worker-0-nrfcg
    namespace: openshift-machine-api
  customDeploy:
    method: install_coreos
  online: true
  rootDeviceHints:
    deviceName: /dev/disk/by-id/scsi-<serial_number>
  userData:
    name: worker-user-data-managed
    namespace: openshift-machine-api
status:
  errorCount: 0
  errorMessage: ""
  goodCredentials:
    credentials:
      name: openshift-worker-0-bmc-secret
      namespace: openshift-machine-api
    credentialsVersion: "16120"
  hardware:
    cpu:
      arch: x86_64
      clockMegahertz: 2300
      count: 64
      flags:
      - 3dnowprefetch
      - abm
      - acpi
      - adx
      - aes
      model: Intel(R) Xeon(R) Gold 5218 CPU @ 2.30GHz
    firmware:
      bios:
        date: 10/26/2020
        vendor: HPE
        version: U30
    hostname: openshift-worker-0
    nics:
    - mac: 48:df:37:c7:f7:b3
      model: 0x8086 0x1572
      name: ens1f3
    ramMebibytes: 262144
    storage:
    - hctl: "0:0:0:0"
      model: VK000960GWTTB
      name: /dev/disk/by-id/scsi-<serial_number>
      sizeBytes: 960197124096
      type: SSD
      vendor: ATA
    systemVendor:
      manufacturer: HPE
      productName: ProLiant DL380 Gen10 (868703-B21)
      serialNumber: CZ200606M3
  lastUpdated: "2022-06-16T11:41:42Z"
  operationalStatus: OK
  poweredOn: true
  provisioning:
    ID: 217baa14-cfcf-4196-b764-744e184a3413
    bootMode: UEFI
    customDeploy:
      method: install_coreos
    image:
      url: ""
    raid:
      hardwareRAIDVolumes: null
      softwareRAIDVolumes: []
    rootDeviceHints:
      deviceName: /dev/disk/by-id/scsi-<serial_number>
    state: provisioned
  triedCredentials:
    credentials:
      name: openshift-worker-0-bmc-secret
      namespace: openshift-machine-api
    credentialsVersion: "16120"
```


# Editing a BareMetalHost resource

After you deploy an Red Hat OpenShift Container Platform cluster on bare metal, you might need to edit a node&#8217;s BareMetalHost resource. Consider the following examples:

* You deploy a cluster with the Assisted Installer and need to add or edit the baseboard management controller (BMC) host name or IP address.
* You want to move a node from one cluster to another without deprovisioning it.

* Ensure the node is in the Provisioned, ExternallyProvisioned, or Available state.

1. Get the list of nodes:

```terminal
$ oc get bmh -n openshift-machine-api
```

2. Before editing the node's BareMetalHost resource, detach the node from Ironic by running the following command:

```terminal
$ oc annotate baremetalhost <node_name> -n openshift-machine-api 'baremetalhost.metal3.io/detached=true' 1
```

Replace <node_name> with the name of the node.
3. Edit the  BareMetalHost resource by running the following command:

```terminal
$ oc edit bmh <node_name> -n openshift-machine-api
```

4. Reattach the node to Ironic by running the following command:

```terminal
$ oc annotate baremetalhost <node_name> -n openshift-machine-api 'baremetalhost.metal3.io/detached'-
```


# Troubleshooting latency when deleting a BareMetalHost resource

When the Bare Metal Operator (BMO) deletes a BareMetalHost resource, Ironic deprovisions the bare-metal host. For example, this might happen when scaling down a machine set. Deprovisioning involves a process known as "cleaning", which performs the following steps:

* Powering off the bare-metal host
* Booting a service RAM disk on the bare-metal host
* Removing partitioning metadata from all disks
* Powering off the bare-metal host again

If cleaning does not succeed, the deletion of the BareMetalHost resource will take a long time and might not finish.


[IMPORTANT]
----
Do not remove the finalizers to force deletion of a BareMetalHost resource. The provisioning back-end has its own database, which maintains a host record. Running actions will continue to run even if you try to force the deletion by removing the finalizers. You might face unexpected issues when attempting to add the bare-metal host later.
----

1. If the cleaning process can recover, wait for it to finish.
2. If cleaning cannot recover, disable the cleaning process by modifying the BareMetalHost resource and setting the automatedCleaningMode field to disabled.

See "Editing a BareMetalHost resource" for additional details.

# Attaching a non-bootable ISO to a bare-metal node

You can attach a generic, non-bootable ISO virtual media image to a provisioned node by using the DataImage resource. After you apply the resource, the ISO image becomes accessible to the operating system after it has booted. This is useful for configuring a node after provisioning the operating system and before the node boots for the first time.

* The node must use Redfish or drivers derived from it to support this feature.
* The node must be in the Provisioned or ExternallyProvisioned state.
* The name must be the same as the name of the node defined in its BareMetalHost resource.
* You have a valid url to the ISO image.

1. Create a DataImage resource:

```yaml
apiVersion: metal3.io/v1alpha1
kind: DataImage
metadata:
  name: <node_name> 1
spec:
  url: "http://dataimage.example.com/non-bootable.iso" 2
```

Specify the name of the node as defined in its BareMetalHost resource.
Specify the URL and path to the ISO image.
2. Save the DataImage resource to a file by running the following command:

```terminal
$ vim <node_name>-dataimage.yaml
```

3. Apply the DataImage resource by running the following command:

```terminal
$ oc apply -f <node_name>-dataimage.yaml -n <node_namespace> 1
```

Replace <node_namespace> so that the namespace matches the namespace for the BareMetalHost resource. For example, openshift-machine-api.
4. Reboot the node.

[NOTE]
----
To reboot the node, attach the reboot.metal3.io annotation, or reset set the online status in the BareMetalHost resource. A forced reboot of the bare-metal node will change the state of the node to NotReady for awhile. For example, 5 minutes or more.
----
5. View the DataImage resource by running the following command:

```terminal
$ oc get dataimage <node_name> -n openshift-machine-api -o yaml
```

Example output

```yaml
apiVersion: v1
items:
- apiVersion: metal3.io/v1alpha1
  kind: DataImage
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"metal3.io/v1alpha1","kind":"DataImage","metadata":{"annotations":{},"name":"bmh-node-1","namespace":"openshift-machine-api"},"spec":{"url":"http://dataimage.example.com/non-bootable.iso"}}
    creationTimestamp: "2024-06-10T12:00:00Z"
    finalizers:
    - dataimage.metal3.io
    generation: 1
    name: bmh-node-1
    namespace: openshift-machine-api
    ownerReferences:
    - apiVersion: metal3.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: BareMetalHost
      name: bmh-node-1
      uid: 046cdf8e-0e97-485a-8866-e62d20e0f0b3
    resourceVersion: "21695581"
    uid: c5718f50-44b6-4a22-a6b7-71197e4b7b69
  spec:
    url: http://dataimage.example.com/non-bootable.iso
  status:
    attachedImage:
      url: http://dataimage.example.com/non-bootable.iso
    error:
      count: 0
      message: ""
    lastReconciled: "2024-06-10T12:05:00Z"
```


# About the HostFirmwareSettings resource

You can use the HostFirmwareSettings resource to retrieve and manage the BIOS settings for a host. When a host moves to the Available state, Ironic reads the host&#8217;s BIOS settings and creates the HostFirmwareSettings resource. The resource contains the complete BIOS configuration returned from the baseboard management controller (BMC). Whereas, the firmware field in the BareMetalHost resource returns three vendor-independent fields, the HostFirmwareSettings resource typically comprises many BIOS settings of vendor-specific fields per host.

The HostFirmwareSettings resource contains two sections:

1. The HostFirmwareSettings spec.
2. The HostFirmwareSettings status.

## The HostFirmwareSettings spec

The spec section of the HostFirmwareSettings resource defines the desired state of the host&#8217;s BIOS, and it is empty by default. Ironic uses the settings in the spec.settings section to update the baseboard management controller (BMC) when the host is in the Preparing state. Use the FirmwareSchema resource to ensure that you do not send invalid name/value pairs to hosts. See "About the FirmwareSchema resource" for additional details.


```terminal
spec:
  settings:
    ProcTurboMode: Disabled1
```


In the foregoing example, the spec.settings section contains a name/value pair that will set the ProcTurboMode BIOS setting to Disabled.


[NOTE]
----
Integer parameters listed in the status section appear as strings. For example, "1". When setting integers in the spec.settings section, the values should be set as integers without quotes. For example, 1.
----

## The HostFirmwareSettings status

The status represents the current state of the host&#8217;s BIOS.



# Getting the HostFirmwareSettings resource

The HostFirmwareSettings resource contains the vendor-specific BIOS properties of a physical host. You must get the HostFirmwareSettings resource for a physical host to review its BIOS properties.

1. Get the detailed list of HostFirmwareSettings resources:

```terminal
$ oc get hfs -n openshift-machine-api -o yaml
```


[NOTE]
----
You can use hostfirmwaresettings as the long form of hfs with the oc get command.
----
2. Get the list of HostFirmwareSettings resources:

```terminal
$ oc get hfs -n openshift-machine-api
```

3. Get the HostFirmwareSettings resource for a particular host

```terminal
$ oc get hfs <host_name> -n openshift-machine-api -o yaml
```


Where <host_name> is the name of the host.

# Editing the HostFirmwareSettings resource

You can edit the HostFirmwareSettings of provisioned hosts.


[IMPORTANT]
----
You can only edit hosts when they are in the provisioned state, excluding read-only values. You cannot edit hosts in the externally provisioned state.
----

1. Get the list of HostFirmwareSettings resources:

```terminal
$ oc get hfs -n openshift-machine-api
```

2. Edit a host's HostFirmwareSettings resource:

```terminal
$ oc edit hfs <host_name> -n openshift-machine-api
```


Where <host_name> is the name of a provisioned host. The HostFirmwareSettings resource will open in the default editor for your terminal.
3. Add name/value pairs to the spec.settings section:
Example

```terminal
spec:
  settings:
    name: value 1
```

Use the FirmwareSchema resource to identify the available settings for the host. You cannot set values that are read-only.
4. Save the changes and exit the editor.
5. Get the host's machine name:

```terminal
 $ oc get bmh <host_name> -n openshift-machine name
```


Where <host_name> is the name of the host. The machine name appears under the CONSUMER field.
6. Annotate the machine to delete it from the machineset:

```terminal
$ oc annotate machine <machine_name> machine.openshift.io/delete-machine=true -n openshift-machine-api
```


Where <machine_name> is the name of the machine to delete.
7. Get a list of nodes and count the number of worker nodes:

```terminal
$ oc get nodes
```

8. Get the machineset:

```terminal
$ oc get machinesets -n openshift-machine-api
```

9. Scale the machineset:

```terminal
$ oc scale machineset <machineset_name> -n openshift-machine-api --replicas=<n-1>
```


Where <machineset_name> is the name of the machineset and <n-1> is the decremented number of worker nodes.
10. When the host enters the Available state, scale up the machineset to make the HostFirmwareSettings resource changes take effect:

```terminal
$ oc scale machineset <machineset_name> -n openshift-machine-api --replicas=<n>
```


Where <machineset_name> is the name of the machineset and <n> is the number of worker nodes.

# Verifying the HostFirmware Settings resource is valid

When the user edits the spec.settings section to make a change to the HostFirmwareSetting(HFS) resource, the Bare Metal Operator (BMO) validates the change against the FimwareSchema resource, which is a read-only resource. If the setting is invalid, the BMO will set the Type value of the status.Condition setting to False and also generate an event and store it in the HFS resource. Use the following procedure to verify that the resource is valid.

1. Get a list of HostFirmwareSetting resources:

```terminal
$ oc get hfs -n openshift-machine-api
```

2. Verify that the HostFirmwareSettings resource for a particular host is valid:

```terminal
$ oc describe hfs <host_name> -n openshift-machine-api
```


Where <host_name> is the name of the host.
Example output

```terminal
Events:
  Type    Reason            Age    From                                    Message
  ----    ------            ----   ----                                    -------
  Normal  ValidationFailed  2m49s  metal3-hostfirmwaresettings-controller  Invalid BIOS setting: Setting ProcTurboMode is invalid, unknown enumeration value - Foo
```


[IMPORTANT]
----
If the response returns ValidationFailed, there is an error in the resource configuration and you must update the values to conform to the FirmwareSchema resource.
----

# About the FirmwareSchema resource

BIOS settings vary among hardware vendors and host models. A FirmwareSchema resource is a read-only resource that contains the types and limits for each BIOS setting on each host model. The data comes directly from the BMC through Ironic. The FirmwareSchema enables you to identify valid values you can specify in the spec field of the HostFirmwareSettings resource. The FirmwareSchema resource has a unique identifier derived from its settings and limits. Identical host models use the same FirmwareSchema identifier. It is likely that multiple instances of HostFirmwareSettings use the same FirmwareSchema.



# Getting the FirmwareSchema resource

Each host model from each vendor has different BIOS settings. When editing the HostFirmwareSettings resource&#8217;s spec section, the name/value pairs you set must conform to that host&#8217;s firmware schema. To ensure you are setting valid name/value pairs, get the FirmwareSchema for the host and review it.

1. To get a list of FirmwareSchema resource instances, execute the following:

```terminal
$ oc get firmwareschema -n openshift-machine-api
```

2. To get a particular FirmwareSchema instance, execute:

```terminal
$ oc get firmwareschema <instance_name> -n openshift-machine-api -o yaml
```


Where <instance_name> is the name of the schema instance stated in the HostFirmwareSettings resource (see Table 3).

# About the HostFirmwareComponents resource

Metal3 provides the HostFirmwareComponents resource, which describes BIOS and baseboard management controller (BMC) firmware versions. The HostFirmwareComponents resource contains two sections:

1. The HostFirmwareComponents spec
2. The HostFirmwareComponents status

## HostFirmwareComponents spec

The spec section of the HostFirmwareComponents resource defines the desired state of the host&#8217;s BIOS and BMC versions.



## HostFirmwareComponents status

The status section of the HostFirmwareComponents resource returns the current status of the host&#8217;s BIOS and BMC versions.



# Getting the HostFirmwareComponents resource

The HostFirmwareComponents resource contains the specific firmware version of the BIOS and baseboard management controller (BMC) of a physical host. You must get the HostFirmwareComponents resource for a physical host to review the firmware version and status.

1. Get the detailed list of HostFirmwareComponents resources:

```terminal
$ oc get hostfirmwarecomponents -n openshift-machine-api -o yaml
```

2. Get the list of HostFirmwareComponents resources:

```terminal
$ oc get hostfirmwarecomponents -n openshift-machine-api
```

3. Get the HostFirmwareComponents resource for a particular host:

```terminal
$ oc get hostfirmwarecomponents <host_name> -n openshift-machine-api -o yaml
```


Where <host_name> is the name of the host.
Example output

```yaml
---
apiVersion: metal3.io/v1alpha1
kind: HostFirmwareComponents
metadata:
  creationTimestamp: 2024-04-25T20:32:06Z"
  generation: 1
  name: ostest-master-2
  namespace: openshift-machine-api
  ownerReferences:
  - apiVersion: metal3.io/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: BareMetalHost
    name: ostest-master-2
    uid: 16022566-7850-4dc8-9e7d-f216211d4195
  resourceVersion: "2437"
  uid: 2038d63f-afc0-4413-8ffe-2f8e098d1f6c
spec:
  updates: []
status:
  components:
  - component: bios
    currentVersion: 1.0.0
    initialVersion: 1.0.0
  - component: bmc
    currentVersion: "1.00"
    initialVersion: "1.00"
  conditions:
  - lastTransitionTime: "2024-04-25T20:32:06Z"
    message: ""
    observedGeneration: 1
    reason: OK
    status: "True"
    type: Valid
  - lastTransitionTime: "2024-04-25T20:32:06Z"
    message: ""
    observedGeneration: 1
    reason: OK
    status: "False"
    type: ChangeDetected
  lastUpdated: "2024-04-25T20:32:06Z"
  updates: []
```


# Editing the HostFirmwareComponents resource

You can edit the HostFirmwareComponents resource of a node.

1. Get the detailed list of HostFirmwareComponents resources:

```terminal
$ oc get hostfirmwarecomponents -n openshift-machine-api -o yaml
```

2. Edit a host's HostFirmwareComponents resource:

```terminal
$ oc edit <host_name> hostfirmwarecomponents -n openshift-machine-api 1
```

Where <host_name> is the name of the host. The HostFirmwareComponents resource will open in the default editor for your terminal.
Example output

```yaml
---
apiVersion: metal3.io/v1alpha1
kind: HostFirmwareComponents
metadata:
  creationTimestamp: 2024-04-25T20:32:06Z"
  generation: 1
  name: ostest-master-2
  namespace: openshift-machine-api
  ownerReferences:
  - apiVersion: metal3.io/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: BareMetalHost
    name: ostest-master-2
    uid: 16022566-7850-4dc8-9e7d-f216211d4195
  resourceVersion: "2437"
  uid: 2038d63f-afc0-4413-8ffe-2f8e098d1f6c
spec:
  updates:
    - name: bios 1
      url: https://myurl.with.firmware.for.bios 2
    - name: bmc 3
      url: https://myurl.with.firmware.for.bmc 4
status:
  components:
  - component: bios
    currentVersion: 1.0.0
    initialVersion: 1.0.0
  - component: bmc
    currentVersion: "1.00"
    initialVersion: "1.00"
  conditions:
  - lastTransitionTime: "2024-04-25T20:32:06Z"
    message: ""
    observedGeneration: 1
    reason: OK
    status: "True"
    type: Valid
  - lastTransitionTime: "2024-04-25T20:32:06Z"
    message: ""
    observedGeneration: 1
    reason: OK
    status: "False"
    type: ChangeDetected
  lastUpdated: "2024-04-25T20:32:06Z"
```

To set a BIOS version, set the name attribute to bios.
To set a BIOS version, set the url attribute to the URL for the firmware version of the BIOS.
To set a BMC version, set the name attribute to bmc.
To set a BMC version, set the url attribute to the URL for the firmware verison of the BMC.
3. Save the changes and exit the editor.
4. Get the host’s machine name:

```terminal
$ oc get bmh <host_name> -n openshift-machine name 1
```

Where <host_name> is the name of the host. The machine name appears under the CONSUMER field.
5. Annotate the machine to delete it from the machine set:

```terminal
$ oc annotate machine <machine_name> machine.openshift.io/delete-machine=true -n openshift-machine-api 1
```

Where <machine_name> is the name of the machine to delete.
6. Get a list of nodes and count the number of worker nodes:

```terminal
$ oc get nodes
```

7. Get the machine set:

```terminal
$ oc get machinesets -n openshift-machine-api
```

8. Scale the machine set:

```terminal
$ oc scale machineset <machineset_name> -n openshift-machine-api --replicas=<n-1> 1
```

Where <machineset_name> is the name of the machine set and <n-1> is the decremented number of worker nodes.
9. When the host enters the Available state, scale up the machine set to make the HostFirmwareComponents resource changes take effect:

```terminal
$ oc scale machineset <machineset_name> -n openshift-machine-api --replicas=<n> 1
```

Where <machineset_name> is the name of the machine set and <n> is the number of worker nodes.