Image-based upgrade for single-node OpenShift clusters

You can use the Lifecycle Agent to perform an image-based upgrade on managed single-node OpenShift clusters.
Image-based upgrade for single-node OpenShift cluster with the Lifecycle Agent
From Red Hat OpenShift Container Platform 4.14.7, the Lifecycle Agent 4.15 provides you with an alternative way to upgrade the platform version of a single-node OpenShift cluster. The image-based upgrade is faster than the standard upgrade method and allows you to directly upgrade from Red Hat OpenShift Container Platform <4.y> to <4.y+2>, and <4.y.z> to <4.y.z+n>.

This upgrade method utilizes a generated OCI image from a dedicated seed cluster that is installed on the target single-node OpenShift cluster as a new ostree stateroot. A seed cluster is a single-node OpenShift cluster deployed with the target Red Hat OpenShift Container Platform version, Day 2 Operators, and configurations that is common to all target clusters.

You can use the seed image, which is generated from the seed cluster, to upgrade the platform version on any single-node OpenShift cluster that has the same combination of hardware, Day 2 Operators, and cluster configuration as the seed cluster.

The image-based upgrade uses custom images that are specific to the hardware platform that the clusters are running on. Each different hardware platform requires a separate seed image.
The Lifecycle Agent uses two custom resources (CRs) on the participating clusters to orchestrate the upgrade:

On the seed cluster, the SeedGenerator CR allows for the seed image generation. This CR specifies the repository to push the seed image to.

On the target cluster, the ImageBasedUpgrade CR specifies the seed container image for the upgrade of the target cluster and the backup configurations for your workloads.


apiVersion: lca.openshift.io/v1alpha1
kind: SeedGenerator
metadata:
  name: seedimage
spec:
  seedImage: <seed_container_image>
apiVersion: lca.openshift.io/v1alpha1
kind: ImageBasedUpgrade
metadata:
  name: example-upgrade
spec:
  stage: Idle 1
  seedImageRef: 2
    version: <target_version>
    image: <seed_container_image>
    pullSecretRef: <seed_pull_secret>
  additionalImages:
    name: ""
    namespace: ""
  autoRollbackOnFailure: {} 3
#    disabledForPostRebootConfig: "true" 4
#    disabledForUpgradeCompletion: "true" 5
#    disabledInitMonitor: "true" 6
#    initMonitorTimeoutSeconds: 1800 7
#  extraManifests: 8
#  - name: sno-extra-manifests
#    namespace: openshift-lifecycle-agent
  oadpContent: 9
  - name: oadp-cm-example
    namespace: openshift-adp
Defines the desired stage for the ImageBasedUpgrade CR. The value can be Idle, Prep, Upgrade, or Rollback.

Defines the target platform version, the seed image to be used, and the secret required to access the image.

Configures the automatic rollback. By default, automatic rollback on failure is enabled throughout the upgrade.

(Optional) If set to true, this option disables automatic rollback when the reconfiguration of the cluster fails upon the first reboot.

(Optional) If set to true, this option disables automatic rollback after the Lifecycle Agent reports a failed upgrade upon completion.

(Optional) If set to true, this option disables automatic rollback when the upgrade does not complete after reboot within the time frame specified in the initMonitorTimeoutSeconds field.

(Optional) Specifies the time frame in seconds. If not defined or set to 0, the default value of 1800 seconds (30 minutes) is used.

(Optional) Specify the list of ConfigMap resources that contain the additional extra manifests that you want to apply to the target cluster. You can also add your custom catalog sources that you want to retain after the upgrade.

Specify the list of ConfigMap resources that contain the OADP Backup and Restore CRs.


After generating the seed image on the seed cluster, you can move through the stages on the target cluster by setting the spec.stage field to the following values in the ImageBasedUpgrade CR:

Idle

Prep

Upgrade

Rollback (Optional)


Idle stage
The Lifecycle Agent creates an ImageBasedUpgrade CR set to stage: Idle when the Operator is first deployed. This is the default stage. There is no ongoing upgrade and the cluster is ready to move to the Prep stage.

After a successful upgrade or a rollback, you commit to the change by patching the stage field to Idle in the ImageBasedUpgrade CR. Changing to this stage ensures that the Lifecycle Agent cleans up resources, so the cluster is ready for upgrades again.
Prep stage
You can complete this stage before a scheduled maintenance window.
During the Prep stage, you specify the following upgrade details in the ImageBasedUpgrade CR:

seed image to use

resources to back up

extra manifests to apply after upgrade


Then, based on what you specify, the Lifecycle Agent prepares for the upgrade without impacting the current running version. This preparation includes ensuring that the target cluster is ready to proceed to the Upgrade stage by checking if it meets certain conditions and pulling the seed image to the target cluster with additional container images specified in the seed image.

You also prepare backup resources with the OADP Operator's Backup and Restore CRs. These CRs are used in the Upgrade stage to reconfigure the cluster, register the cluster with RHACM, and restore application artifacts.

The same version of the applications must function on both the current and the target release of Red Hat OpenShift Container Platform.
Additionally to the OADP Operator, the Lifecycle Agent uses the ostree versioning system to create a backup, which allow complete cluster reconfiguration after both upgrade and rollback.

You can stop the upgrade process at this point by moving to the Idle stage or you can start the upgrade by moving to the Upgrade stage in the ImageBasedUpgrade CR . If you stop, the Operator performs cleanup operations.
Upgrade stage
Just before the Lifecycle Agent starts the upgrade process, the backup of your cluster resources specified in the Prep stage are created on a compatible Object storage solution. After the target cluster reboots with the new platform version, the Operator applies the cluster and application configurations defined in the Backup and Restore CRs, and applies any extra manifests that are specified in the referenced ConfigMap resource.

The Operator also regenerates the seed image's cluster cryptography. This ensures that each single-node OpenShift cluster upgraded with the same seed image has unique and valid cryptographic objects.

Once you are satisfied with the changes, you can finalize the upgrade by moving to the Idle stage. If you encounter issues after the upgrade, you can move to the Rollback stage for a manual rollback.
(Optional) Rollback stage
The rollback stage can be initiated manually or automatically upon failure. During the Rollback stage, the Lifecycle Agent sets the original ostree stateroot as default. Then, the node reboots with the previous release of Red Hat OpenShift Container Platform and application configurations.

By default, automatic rollback is enabled in the ImageBasedUpgrade CR. The Lifecycle Agent can initiate an automatic rollback if the upgrade fails or if the upgrade does not complete within the specified time limit. For more information about the automatic rollback configurations, see the (Optional) Initiating rollback of the single-node OpenShift cluster after an image-based upgrade section.

If you move to the Idle stage after a rollback, the Lifecycle Agent cleans up resources that can be used to troubleshoot a failed upgrade.
Installing the Lifecycle Agent by using the CLI
You can use the OpenShift CLI (oc) to install the Lifecycle Agent from the 4.15 Operator catalog on both the seed and target cluster.

Install the OpenShift CLI (oc).

Log in as a user with cluster-admin privileges.


Create a namespace for the Lifecycle Agent.

Create an Operator group for the Lifecycle Agent.

Create a Subscription CR:


Verify that the installation succeeded by inspecting the CSV resource:

Verify that the Lifecycle Agent is up and running:
Installing the Lifecycle Agent by using the web console
You can use the Red Hat OpenShift Container Platform web console to install the Lifecycle Agent from the 4.15 Operator catalog on both the seed and target cluster.

Log in as a user with cluster-admin privileges.


In the Red Hat OpenShift Container Platform web console, navigate to Operators → OperatorHub.

Search for the Lifecycle Agent from the list of available Operators, and then click Install.

On the Install Operator page, under A specific namespace on the cluster select openshift-lifecycle-agent. Then, click Install.

Click Install.


To confirm that the installation is successful:

Navigate to the Operators → Installed Operators page.

Ensure that the Lifecycle Agent is listed in the openshift-lifecycle-agent project with a Status of InstallSucceeded.


During installation an Operator might display a Failed status. If the installation later succeeds with an InstallSucceeded message, you can ignore the Failed message.
If the Operator is not installed successfully:

Go to the Operators → Installed Operators page and inspect the Operator Subscriptions and Install Plans tabs for any failure or errors under Status.

Go to the Workloads → Pods page and check the logs for pods in the openshift-lifecycle-agent project.
Sharing the container directory between ostree stateroots
You must apply a MachineConfig to both the seed and the target clusters during installation time to create a separate partition and share the /var/lib/containers directory between the two ostree stateroots that will be used during the upgrade process.

Sharing the container directory between ostree stateroots when using RHACM
When you are using RHACM, you must apply a MachineConfig to both the seed and target clusters.

You must complete this procedure at installation time.
Log in as a user with cluster-admin privileges.


Apply a MachineConfig to create a separate partition.
Sharing the container directory between ostree stateroots when using GitOps ZTP
When you are using the GitOps ZTP workflow, you can do the following procedure to create a separate disk partition on both the seed and target cluster and to share the /var/lib/containers directory.

You must complete this procedure at installation time.
Log in as a user with cluster-admin privileges.

Install Butane.


Create the storage.bu file.

Convert the storage.bu to an Ignition file.

Copy the output into the .spec.clusters.nodes.ignitionConfigOverride field in the SiteConfig CR.


During or after installation, verify on the hub cluster that the BareMetalHost object shows the annotation.

After installation, check the single-node OpenShift disk status:


A Guide for Creating a Separate-disk Partition at Installation Time
Generating a seed image with the Lifecycle Agent
Use the Lifecycle Agent to generate the seed image with the SeedGenerator CR. The Operator checks for required system configurations, performs any necessary system cleanup before generating the seed image, and launches the image generation. The seed image generation includes the following tasks:

Stopping cluster operators

Preparing the seed image configuration

Generating and pushing the seed image to the image repository specified in the SeedGenerator CR

Restoring cluster operators

Expiring seed cluster certificates

Generating new certificates for the seed cluster

Restoring and updates the SeedGenerator CR on the seed cluster


The generated seed image does not include any site-specific data.
During the Developer Preview of this feature, when upgrading a cluster, any custom trusted certificates configured on the cluster will be lost. As a temporary workaround, to preserve these certificates, you must use a seed image from a seed cluster that trusts the certificates.
Deploy a single-node OpenShift cluster with a DU profile.

Install the Lifecycle Agent on the seed cluster.

Install the OADP Operator on the seed cluster.

Log in as a user with cluster-admin privileges.

The seed cluster has the same CPU topology as the target cluster.

The seed cluster has the same IP version as the target cluster.

If the target cluster has a proxy configuration, the seed cluster must have a proxy configuration too. The proxy configuration does not have to be the same.

The seed cluster is registered as a managed cluster.

The Lifecycle Agent deployed on the target cluster is compatible with the version in the seed image.

The seed cluster has a separate partition for the container images that will be shared between stateroots. For more information, see Additional resources.


If the target cluster has multiple IPs and one of them belongs to the subnet that was used for creating the seed image, the upgrade fails if the target cluster's node IP does not belong to that subnet.
Detach the seed cluster from the hub cluster either manually or if using ZTP, by removing the SiteConfig CR from the kustomization.yaml.
This deletes any cluster-specific resources from the seed cluster that must not be in the seed image.

If you are using GitOps ZTP, detach your cluster by removing the seed cluster's SiteConfig CR from the kustomization.yaml:

Create the Secret.

Create the SeedGenerator CR:

Generate the seed image by running the following command:


Once the image generation is complete, the cluster can be reattached to the hub cluster, and you can access it through the API.

If you want to generate further seed images, you must provision a new seed cluster with the version you want to generate a seed image from.

Once the cluster recovers and it is available, you can check the status of the SeedGenerator CR:

Verify that the single-node OpenShift cluster is running and is attached to the RHACM hub cluster:


A Guide for Creating a Separate-disk Partition at Installation Time

Sharing the container directory between ostree stateroots

Installing the OADP Operator
Preparing the single-node OpenShift cluster for the image-based upgrade
When you deploy the Lifecycle Agent on a cluster, an ImageBasedUpgrade CR is automatically created. You edit this CR to specify the image repository of the seed image and to move through the different stages.

Install Lifecycle Agent on the target cluster.

Generate a seed image from a compatible seed cluster.

Install the OADP Operator, the DataProtectionApplication CR and its secret on the target cluster.

Create an S3-compatible storage solution and a ready-to-use bucket with proper credentials configured. For more information, see Additional resources.

Create a separate partition on the target cluster for the container images that is shared between stateroots. For more information about, see Additional resources.


If the target cluster has multiple IPs and one of them belongs to the subnet that was used for creating the seed image, the upgrade fails if the target cluster's node IP does not belong to that subnet.
This example procedure demonstrates how to back up and upgrade a cluster with applications which are using persistent volumes.

The target cluster does not need to be detached from the hub cluster.
Create your OADP Backup and Restore CRs.

(Optional) To keep your custom catalog sources after the upgrade, add them to the spec.extraManifest in the ImageBasedUpgrade CR. For more information, see Catalog source.

Edit the ImageBasedUpgrade CR:

Change the value of the stage field to Prep in the ImageBasedUpgrade CR:


Check the status of the ImageBasedUpgrade CR.


A Guide for Creating a Separate-disk Partition at Installation Time

Sharing the container directory between ostree stateroots

About backup and snapshot locations and their secrets

Creating a Backup CR

Creating a Restore CR
Upgrading the single-node OpenShift cluster with Lifecycle Agent
Once you generated the seed image and completed the Prep stage, you can upgrade the target cluster. During the upgrade process, the OADP Operator creates a backup of the artifacts specified in the OADP CRs, then the Lifecycle Agent upgrades the cluster.

If the upgrade fails or stops, an automatic rollback is initiated. If you have an issue after the upgrade, you can initiate a manual rollback. For more information about manual rollback, see "(Optional) Initiating rollback of the single-node OpenShift clusters after an image-based upgrade".

During the Developer Preview of this feature, when upgrading a cluster, any custom trusted certificates configured on the cluster will be lost. As a temporary workaround, to preserve these certificates, you must use a seed image from a seed cluster that trusts the certificates.
Complete the Prep stage.


When you are ready, move to the upgrade stage by changing the value of the stage field to Upgrade in the ImageBasedUpgrade CR.

Check the status of the ImageBasedUpgrade CR:

The OADP Operator creates a backup of the data specified in the OADP Backup and Restore CRs.

The target cluster reboots.

Monitor the status of the CR:

The cluster reboots.

Once you are satisfied with the upgrade, commit to the changes by changing the value of the stage field to Idle in the ImageBasedUpgrade CR:


Check the status of the ImageBasedUpgrade CR:

Check the status of the cluster restoration:
(Optional) Initiating rollback of the single-node OpenShift cluster after an image-based upgrade
You can manually roll back the changes if you encounter unresolvable issues after an upgrade.

By default, an automatic rollback is initiated on the following conditions:

If the reconfiguration of the cluster fails upon the first reboot.

If the Lifecycle Agent reports a failed upgrade upon completing the process.

If the upgrade does not complete within the time frame specified in the initMonitorTimeoutSeconds field after rebooting.


You can disable the automatic rollback configuration in the ImageBasedUpgrade CR at the Prep stage:

apiVersion: lca.openshift.io/v1alpha1
kind: ImageBasedUpgrade
metadata:
  name: example-upgrade
spec:
  stage: Idle
  seedImageRef:
    version: 4.15.2
    image: <seed_container_image>
  additionalImages:
    name: ""
    namespace: ""
  autoRollbackOnFailure: {} 1
#    disabledForPostRebootConfig: "true" 2
#    disabledForUpgradeCompletion: "true" 3
#    disabledInitMonitor: "true" 4
#    initMonitorTimeoutSeconds: 1800 5
[...]
By default, automatic rollback on failure is enabled throughout the upgrade.

(Optional) If set to true, this option disables automatic rollback when the reconfiguration of the cluster fails upon the first reboot.

(Optional) If set to true, this option disables automatic rollback after the Lifecycle Agent reports a failed upgrade upon completion.

(Optional) If set to true, this option disables automatic rollback when the upgrade does not complete within the time frame specified in the initMonitorTimeoutSeconds field after reboot.

Specifies the time frame in seconds. If not defined or set to 0, the default value of 1800 seconds (30 minutes) is used.


Log in to the hub cluster as a user with cluster-admin privileges.


Move to the rollback stage by changing the value of the stage field to Rollback in the ImageBasedUpgrade CR.

The Lifecycle Agent reboots the cluster with the previously installed version of Red Hat OpenShift Container Platform and restores the applications.

Commit to the rollback by changing the value of the stage field to Idle in the ImageBasedUpgrade CR:


If you move to the Idle stage after a rollback, the Lifecycle Agent cleans up resources that can be used to troubleshoot a failed upgrade.
Upgrading the single-node OpenShift cluster with Lifecycle Agent through GitOps ZTP
You can upgrade your managed single-node OpenShift cluster with the image-based upgrade through GitOps ZTP.

During the Developer Preview of this feature, when upgrading a cluster, any custom trusted certificates configured on the cluster will be lost. As a temporary workaround, to preserve these certificates, you must use a seed image from a seed cluster that trusts the certificates.
Install RHACM 2.9.2. or later version.

Install TALM.

Update GitOps ZTP to the latest version.

Provision one or more managed clusters with GitOps ZTP.

Log in as a user with cluster-admin privileges.

You generated a seed image from a compatible seed cluster.

Create an S3-compatible storage solution and a ready-to-use bucket with proper credentials configured. For more information, see Additional resources.

Create a separate partition on the target cluster for the container images that is shared between stateroots. For more information about, see Additional resources.


Create a policy for the OADP ConfigMap, named oadp-cm-common-policies. For more information about how to create the ConfigMap, follow the first step in Preparing the single-node OpenShift cluster for the image-based upgrade in Additional resources.

(Optional) Create a policy for the ConfigMap of your user-specific extra manifests that are not part of the seed image. The Lifecycle Agent does not automatically extract these extra manifests from the seed cluster, so you can add a ConfigMap resource of your user-specific extra manifests in the spec.extraManifests field in the ImageBasedUpgrade CR.

(Optional) To keep your custom catalog sources after the upgrade, add them to the spec.extraManifest in the ImageBasedUpgrade CR. For more information, see Catalog source.

Create a PolicyGenTemplate CR that contains policies for the Prep and Upgrade stages.

Create a PolicyGenTemplate CR for the default set of extra manifests:

Commit, and push the created CRs to the GitOps ZTP Git repository.

To reflect the target platform version, update the du-profile or the corresponding policy-binding label in the SiteConfig CR.

Commit and push the updated SiteConfig CR to the GitOps ZTP Git repository.

When you are ready to move to the Prep stage, create the ClusterGroupUpgrade CR with the Prep and OADP ConfigMap policies:

Apply the Prep policy:

When you are ready to move to the Upgrade stage, create the ClusterGroupUpgrade CR that references the Upgrade policy:

Apply the Upgrade policy:

When you are satisfied with the changes and ready to finalize the upgrade, create the PolicyGenTemplate to finalize the upgrade:

Create a ClusterGroupUpgrade CR that references the policy that finalizes the upgrade:

Apply the policy:


(Optional) Rollback the upgrade with TALM
If you encounter an issue after upgrade, you can start a manual rollback.

Update the du-profile or the corresponding policy-binding label with the original platform version in the SiteConfig CR:

When you are ready to move to the Rollback stage, create a PolicyGenTemplate CR for the Rollback policies:

Create a ClusterGroupUpgrade CR that references the Rollback policies:

Apply the Rollback policy:

When you are satisfied with the changes and ready to finalize the rollback, create the PolicyGenTemplate CR:

Create a ClusterGroupUpgrade CR that references the policy that finalizes the upgrade:

Apply the policy:


Preparing the GitOps ZTP site configuration repository for version independence

Preparing the single-node OpenShift cluster for the image-based upgrade

Sharing the container directory between ostree stateroots

About backup and snapshot locations and their secrets

Creating a Backup CR

Creating a Restore CR