DNS Operator in Red Hat OpenShift Container Platform

In Red Hat OpenShift Container Platform, the DNS Operator deploys and manages a CoreDNS instance to provide a name resolution service to pods inside the cluster, enables DNS-based Kubernetes Service discovery, and resolves internal cluster.local names.
Checking the status of the DNS Operator
The DNS Operator implements the dns API from the operator.openshift.io API group. The Operator deploys CoreDNS using a daemon set, creates a service for the daemon set, and configures the kubelet to instruct pods to use the CoreDNS service IP address for name resolution.

The DNS Operator is deployed during installation with a Deployment object.

Use the oc get command to view the deployment status:

Use the oc get command to view the state of the DNS Operator:
View the default DNS
Every new Red Hat OpenShift Container Platform installation has a dns.operator named default.

Use the oc describe command to view the default dns:
Using DNS forwarding
You can use DNS forwarding to override the default forwarding configuration in the /etc/resolv.conf file in the following ways:

Specify name servers (spec.servers) for every zone. If the forwarded zone is the ingress domain managed by Red Hat OpenShift Container Platform, then the upstream name server must be authorized for the domain.

Provide a list of upstream DNS servers (spec.upstreamResolvers).

Change the default forwarding policy.


A DNS forwarding configuration for the default domain can have both the default servers specified in the /etc/resolv.conf file and the upstream DNS servers.
Modify the DNS Operator object named default:


For more information on DNS forwarding, see the CoreDNS forward documentation.
Checking DNS Operator status
You can inspect the status and view the details of the DNS Operator using the oc describe command.

View the status of the DNS Operator:
Viewing DNS Operator logs
You can view DNS Operator logs by using the oc logs command.

View the logs of the DNS Operator:
Setting the CoreDNS log level
Log levels for CoreDNS and the CoreDNS Operator are set by using different methods. You can configure the CoreDNS log level to determine the amount of detail in logged error messages. The valid values for CoreDNS log level are Normal, Debug, and Trace. The default logLevel is Normal.

The CoreDNS error log level is always enabled. The following log level settings report different error responses:

logLevel: Normal enables the "errors" class: log . { class error }.

logLevel: Debug enables the "denial" class: log . { class denial error }.

logLevel: Trace enables the "all" class: log . { class all }.
To set logLevel to Debug, enter the following command:

To set logLevel to Trace, enter the following command:


To ensure the desired log level was set, check the config map:
Setting the CoreDNS Operator log level
Log levels for CoreDNS and CoreDNS Operator are set by using different methods. Cluster administrators can configure the Operator log level to more quickly track down OpenShift DNS issues. The valid values for operatorLogLevel are Normal, Debug, and Trace. Trace has the most detailed information. The default operatorlogLevel is Normal. There are seven logging levels for Operator issues: Trace, Debug, Info, Warning, Error, Fatal, and Panic. After the logging level is set, log entries with that severity or anything above it will be logged.

operatorLogLevel: "Normal" sets logrus.SetLogLevel("Info").

operatorLogLevel: "Debug" sets logrus.SetLogLevel("Debug").

operatorLogLevel: "Trace" sets  logrus.SetLogLevel("Trace").


To set operatorLogLevel to Debug, enter the following command:

To set operatorLogLevel to Trace, enter the following command:


To review the resulting change, enter the following command:

To review the logs for the daemonset, enter the following command:
Tuning the CoreDNS cache
For CoreDNS, you can configure the maximum duration of both successful or unsuccessful caching, also known respectively as positive or negative caching. Tuning the cache duration of DNS query responses can reduce the load for any upstream DNS resolvers.

Setting TTL fields to low values could lead to an increased load on the cluster, any upstream resolvers, or both.
Edit the DNS Operator object named default by running the following command:

Modify the time-to-live (TTL) caching values:


To review the change, look at the config map again by running the following command:

Verify that you see entries that look like the following example:


For more information on caching, see CoreDNS cache.
Advanced tasks
Changing the DNS Operator managementState
The DNS Operator manages the CoreDNS component to provide a name resolution service for pods and services in the cluster. The managementState of the DNS Operator is set to Managed by default, which means that the DNS Operator is actively managing its resources. You can change it to Unmanaged, which means the DNS Operator is not managing its resources.

The following are use cases for changing the DNS Operator managementState:

You are a developer and want to test a configuration change to see if it fixes an issue in CoreDNS. You can stop the DNS Operator from overwriting the configuration change by setting the managementState to Unmanaged.

You are a cluster administrator and have reported an issue with CoreDNS, but need to apply a workaround until the issue is fixed. You can set the managementState field of the DNS Operator to Unmanaged to apply the workaround.


Change managementState to Unmanaged in the DNS Operator:

Review managementState of the DNS Operator using the jsonpath command line JSON parser:


You cannot upgrade while the managementState is set to Unmanaged.
Controlling DNS pod placement
The DNS Operator has two daemon sets: one for CoreDNS called dns-default and one for managing the /etc/hosts file called node-resolver.

You might find a need to control which nodes have CoreDNS pods assigned and running, although this is not a common operation. For example, if the cluster administrator has configured security policies that can prohibit communication between pairs of nodes, that would necessitate restricting the set of nodes on which the daemonset for CoreDNS runs. If DNS pods are running on some nodes in the cluster and the nodes where DNS pods are not running have network connectivity to nodes where DNS pods are running, DNS service will be available to all pods.

The node-resolver daemon set must run on every node host because it adds an entry for the cluster image registry to support pulling images. The node-resolver pods have only one job: to look up the image-registry.openshift-image-registry.svc service's cluster IP address and add it to /etc/hosts on the node host so that the container runtime can resolve the service name.

As a cluster administrator, you can use a custom node selector to configure the daemon set for CoreDNS to run or not run on certain nodes.

You installed the oc CLI.

You are logged in to the cluster as a user with cluster-admin privileges.

Your DNS Operator managementState is set to Managed.


To allow the daemon set for CoreDNS to run on certain nodes, configure a taint and toleration:
Configuring DNS forwarding with TLS
When working in a highly regulated environment, you might need the ability to secure DNS traffic when forwarding requests to upstream resolvers so that you can ensure additional DNS traffic and data privacy.

Be aware that CoreDNS caches forwarded connections for 10 seconds. CoreDNS will hold a TCP connection open for those 10 seconds if no request is issued. With large clusters, ensure that your DNS server is aware that it might get many new connections to hold open because you can initiate a connection per node. Set up your DNS hierarchy accordingly to avoid performance issues.

Modify the DNS Operator object named default:


View the config map:


For more information on DNS forwarding, see the CoreDNS forward documentation.