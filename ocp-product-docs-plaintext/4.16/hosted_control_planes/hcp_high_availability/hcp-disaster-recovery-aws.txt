Disaster recovery for a hosted cluster in AWS

You can recover a hosted cluster to the same region within Amazon Web Services (AWS). For example, you need disaster recovery when the upgrade of a management cluster fails and the hosted cluster is in a read-only state.

Hosted control planes is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.

For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
The disaster recovery process involves the following steps:

Backing up the hosted cluster on the source management cluster

Restoring the hosted cluster on a destination management cluster

Deleting the hosted cluster from the source management cluster


Your workloads remain running during the process. The Cluster API might be unavailable for a period, but that does not affect the services that are running on the worker nodes.

Both the source management cluster and the destination management cluster must have the --external-dns flags to maintain the API server URL. That way, the server URL ends with https://api-sample-hosted.sample-hosted.aws.openshift.com. See the following example:

--external-dns-provider=aws \
--external-dns-credentials=<path_to_aws_credentials_file> \
--external-dns-domain-filter=<basedomain>
If you do not include the --external-dns flags to maintain the API server URL, you cannot migrate the hosted cluster.
Overview of the backup and restore process
The backup and restore process works as follows:

On management cluster 1, which you can think of as the source management cluster, the control plane and workers interact by using the external DNS API. The external DNS API is accessible, and a load balancer sits between the management clusters.

You take a snapshot of the hosted cluster, which includes etcd, the control plane, and the worker nodes. During this process, the worker nodes continue to try to access the external DNS API even if it is not accessible, the workloads are running, the control plane is saved in a local manifest file, and etcd is backed up to an S3 bucket. The data plane is active and the control plane is paused.

On management cluster 2, which you can think of as the destination management cluster, you restore etcd from the S3 bucket and restore the control plane from the local manifest file. During this process, the external DNS API is stopped, the hosted cluster API becomes inaccessible, and any workers that use the API are unable to update their manifest files, but the workloads are still running.

The external DNS API is accessible again, and the worker nodes use it to move to management cluster 2. The external DNS API can access the load balancer that points to the control plane.

On management cluster 2, the control plane and worker nodes interact by using the external DNS API. The resources are deleted from management cluster 1, except for the S3 backup of etcd. If you try to set up the hosted cluster again on mangagement cluster 1, it will not work.
Backing up a hosted cluster
To recover your hosted cluster in your target management cluster, you first need to back up all of the relevant data.

Create a configmap file to declare the source management cluster by entering this command:

Shut down the reconciliation in the hosted cluster and in the node pools by entering these commands:

Back up etcd and upload the data to an S3 bucket by running this bash script:

Back up Kubernetes and Red Hat OpenShift Container Platform objects by entering the following commands. You need to back up the following objects:

Clean up the ControlPlane routes by entering this command:

Verify that the Route53 entries are clean by running this script:


Check all of the Red Hat OpenShift Container Platform objects and the S3 bucket to verify that everything looks as expected.

Restore your hosted cluster.
Restoring a hosted cluster
Gather all of the objects that you backed up and restore them in your destination management cluster.

You backed up the data from your source management cluster.

Ensure that the kubeconfig file of the destination management cluster is placed as it is set in the KUBECONFIG variable or, if you use the script, in the MGMT2_KUBECONFIG variable. Use export KUBECONFIG=<Kubeconfig FilePath> or, if you use the script, use export KUBECONFIG=${MGMT2_KUBECONFIG}.
Verify that the new management cluster does not contain any namespaces from the cluster that you are restoring by entering these commands:

Re-create the deleted namespaces by entering these commands:

Restore the secrets in the HC namespace by entering this command:

Restore the objects in the HostedCluster control plane namespace by entering these commands:

If you are recovering the nodes and the node pool to reuse AWS instances, restore the objects in the HC control plane namespace by entering these commands:

Restore the etcd data and the hosted cluster by running this bash script:

If you are recovering the nodes and the node pool to reuse AWS instances, restore the node pool by entering this command:


To verify that the nodes are fully restored, use this function:


Shut down and delete your cluster.
Deleting a hosted cluster from your source management cluster
After you back up your hosted cluster and restore it to your destination management cluster, you shut down and delete the hosted cluster on your source management cluster.

You backed up your data and restored it to your source management cluster.

Ensure that the kubeconfig file of the destination management cluster is placed as it is set in the KUBECONFIG variable or, if you use the script, in the MGMT_KUBECONFIG variable. Use export KUBECONFIG=<Kubeconfig FilePath> or, if you use the script, use export KUBECONFIG=${MGMT_KUBECONFIG}.
Scale the deployment and statefulset objects by entering these commands:

Delete the NodePool objects by entering these commands:

Delete the machine and machineset objects by entering these commands:

Delete the cluster object by entering these commands:

Delete the AWS machines (Kubernetes objects) by entering these commands. Do not worry about deleting the real AWS machines. The cloud instances will not be affected.

Delete the HostedControlPlane and ControlPlane HC namespace objects by entering these commands:

Delete the HostedCluster and HC namespace objects by entering these commands:


To verify that everything works, enter these commands:


Delete the OVN pods in the hosted cluster so that you can connect to the new OVN control plane that runs in the new management cluster:

Load the KUBECONFIG environment variable with the hosted cluster's kubeconfig path.

Enter this command: