# Metadata APIs



# APIRequestCount [apiserver.openshift.io/v1]

Description:: 
APIRequestCount tracks requests made to an API. The instance name must be of the form resource.version.group, matching the resource.
 Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object

# Binding [v1]

Description:: 
Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
Type:: object

# ComponentStatus [v1]

Description:: 
ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
Type:: object

# ConfigMap [v1]

Description:: 
ConfigMap holds configuration data for pods to consume.
Type:: object

# ControllerRevision [apps/v1]

Description:: 
ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
Type:: object

# Event [events.k8s.io/v1]

Description:: 
Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
Type:: object

# Event [v1]

Description:: 
Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
Type:: object

# Lease [coordination.k8s.io/v1]

Description:: 
Lease defines a lease concept.
Type:: object

# Namespace [v1]

Description:: 
Namespace provides a scope for Names. Use of multiple namespaces is optional.
Type:: object

# SharedConfigMap [sharedresource.openshift.io/v1alpha1]

Description:: 
SharedConfigMap allows a ConfigMap to be shared across namespaces. Pods can mount the shared ConfigMap by adding a CSI volume to the pod specification using the "csi.sharedresource.openshift.io" CSI driver and a reference to the SharedConfigMap in the volume attributes:
 spec: volumes: - name: shared-configmap csi: driver: csi.sharedresource.openshift.io volumeAttributes: sharedConfigMap: my-share
 For the mount to be successful, the pod's service account must be granted permission to 'use' the named SharedConfigMap object within its namespace with an appropriate Role and RoleBinding. For compactness, here are example oc invocations for creating such Role and RoleBinding objects.
 oc create role shared-resource-my-share --verb=use --resource=sharedconfigmaps.sharedresource.openshift.io --resource-name=my-share oc create rolebinding shared-resource-my-share --role=shared-resource-my-share --serviceaccount=my-namespace:default
 Shared resource objects, in this case ConfigMaps, have default permissions of list, get, and watch for system authenticated users.
 Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support. These capabilities should not be used by applications needing long term support.
Type:: object