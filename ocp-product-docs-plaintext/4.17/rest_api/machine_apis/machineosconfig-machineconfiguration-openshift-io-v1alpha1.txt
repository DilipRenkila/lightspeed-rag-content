# MachineOSConfig [machineconfiguration.openshift.io/v1alpha1]


Description:: 
MachineOSConfig describes the configuration for a build process managed by the MCO Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
spec describes the configuration of the machineosconfig
Type:: object
Required:: 
* buildInputs
* machineConfigPool



## .spec.buildInputs

Description:: 
buildInputs is where user input options for the build live
Type:: object
Required:: 
* baseImagePullSecret
* imageBuilder
* renderedImagePushSecret
* renderedImagePushspec



## .spec.buildInputs.baseImagePullSecret

Description:: 
baseImagePullSecret is the secret used to pull the base image. must live in the openshift-machine-config-operator namespace
Type:: object
Required:: 
* name



## .spec.buildInputs.containerFile

Description:: 
containerFile describes the custom data the user has specified to build into the image. this is also commonly called a Dockerfile and you can treat it as such. The content is the content of your Dockerfile.
Type:: array

## .spec.buildInputs.containerFile[]

Description:: 
MachineOSContainerfile contains all custom content the user wants built into the image
Type:: object
Required:: 
* content



## .spec.buildInputs.imageBuilder

Description:: 
machineOSImageBuilder describes which image builder will be used in each build triggered by this MachineOSConfig
Type:: object
Required:: 
* imageBuilderType



## .spec.buildInputs.renderedImagePushSecret

Description:: 
renderedImagePushSecret is the secret used to connect to a user registry. the final image push and pull secrets should be separate for security concerns. If the final image push secret is somehow exfiltrated, that gives someone the power to push images to the image repository. By comparison, if the final image pull secret gets exfiltrated, that only gives someone to pull images from the image repository. It's basically the principle of least permissions. this push secret will be used only by the MachineConfigController pod to push the image to the final destination. Not all nodes will need to push this image, most of them will only need to pull the image in order to use it.
Type:: object
Required:: 
* name



## .spec.buildOutputs

Description:: 
buildOutputs is where user input options for the build live
Type:: object



## .spec.buildOutputs.currentImagePullSecret

Description:: 
currentImagePullSecret is the secret used to pull the final produced image. must live in the openshift-machine-config-operator namespace the final image push and pull secrets should be separate for security concerns. If the final image push secret is somehow exfiltrated, that gives someone the power to push images to the image repository. By comparison, if the final image pull secret gets exfiltrated, that only gives someone to pull images from the image repository. It's basically the principle of least permissions. this pull secret will be used on all nodes in the pool. These nodes will need to pull the final OS image and boot into it using rpm-ostree or bootc.
Type:: object
Required:: 
* name



## .spec.machineConfigPool

Description:: 
machineConfigPool is the pool which the build is for
Type:: object
Required:: 
* name



## .status

Description:: 
status describes the status of the machineosconfig
Type:: object



## .status.conditions

Description:: 
conditions are state related conditions for the config.
Type:: array

## .status.conditions[]

Description:: 
Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example,
 type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"
 // other fields }
Type:: object
Required:: 
* lastTransitionTime
* message
* reason
* status
* type



# API endpoints

The following API endpoints are available:

* /apis/machineconfiguration.openshift.io/v1alpha1/machineosconfigs
* DELETE: delete collection of MachineOSConfig
* GET: list objects of kind MachineOSConfig
* POST: create a MachineOSConfig
* /apis/machineconfiguration.openshift.io/v1alpha1/machineosconfigs/{name}
* DELETE: delete a MachineOSConfig
* GET: read the specified MachineOSConfig
* PATCH: partially update the specified MachineOSConfig
* PUT: replace the specified MachineOSConfig
* /apis/machineconfiguration.openshift.io/v1alpha1/machineosconfigs/{name}/status
* GET: read status of the specified MachineOSConfig
* PATCH: partially update status of the specified MachineOSConfig
* PUT: replace status of the specified MachineOSConfig

## /apis/machineconfiguration.openshift.io/v1alpha1/machineosconfigs

HTTP method:: DELETE
Description:: delete collection of MachineOSConfig



HTTP method:: GET
Description:: list objects of kind MachineOSConfig



HTTP method:: POST
Description:: create a MachineOSConfig







## /apis/machineconfiguration.openshift.io/v1alpha1/machineosconfigs/{name}



HTTP method:: DELETE
Description:: delete a MachineOSConfig





HTTP method:: GET
Description:: read the specified MachineOSConfig



HTTP method:: PATCH
Description:: partially update the specified MachineOSConfig





HTTP method:: PUT
Description:: replace the specified MachineOSConfig







## /apis/machineconfiguration.openshift.io/v1alpha1/machineosconfigs/{name}/status



HTTP method:: GET
Description:: read status of the specified MachineOSConfig



HTTP method:: PATCH
Description:: partially update status of the specified MachineOSConfig





HTTP method:: PUT
Description:: replace status of the specified MachineOSConfig





